#!/bin/bash
# pre-commit hook - Enforces workflow completion before allowing commits
# Install to: .git/hooks/pre-commit

set -e

# Configuration
WORKFLOW_STATE=".workflow_state"
WORKFLOW_SCRIPTS="scripts/workflow-enforcement"
BYPASS_FILE=".workflow_bypass"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

error() {
    echo -e "${RED}[PRE-COMMIT]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[PRE-COMMIT]${NC} $1"
}

success() {
    echo -e "${GREEN}[PRE-COMMIT]${NC} $1"
}

# Check for emergency bypass (use with extreme caution)
if [ -f "$BYPASS_FILE" ]; then
    warning "⚠️  WORKFLOW BYPASS DETECTED"
    warning "Emergency bypass is active. This should only be used for critical fixes."

    # Log the bypass
    echo "BYPASSED: $(date -u +"%Y-%m-%dT%H:%M:%SZ") by $USER" >> .workflow_bypass_log

    # Remove bypass file (single use only)
    rm -f "$BYPASS_FILE"

    warning "Bypass used and removed. Schedule post-commit review!"
    exit 0
fi

# Check if workflow state exists
if [ ! -f "$WORKFLOW_STATE" ]; then
    error "❌ No workflow state found"
    echo ""
    echo "  The git workflow enforcement system requires completing quality gates"
    echo "  before commits. Please run the workflow:"
    echo ""
    echo "  1. Initialize workflow:     $WORKFLOW_SCRIPTS/workflow_state_manager.sh init"
    echo "  2. Run quality gate:        $WORKFLOW_SCRIPTS/quality_gate_validator.sh"
    echo "  3. Then commit your changes"
    echo ""
    echo "  For emergency bypass (use with extreme caution):"
    echo "  touch .workflow_bypass && git commit -m 'EMERGENCY: your message'"
    echo ""
    exit 1
fi

# Source the workflow state
source "$WORKFLOW_STATE"

# Check if quality gate has passed
if [ "$QUALITY_GATE_PASSED" != "true" ]; then
    error "❌ Quality gate has not passed"
    echo ""
    echo "  Current workflow state:"
    echo "    Phase:  $PHASE"
    echo "    Status: $STATUS"
    echo ""

    if [ "$STATUS" = "FAILED" ]; then
        echo "  The quality gate failed. Please:"
        echo "  1. Review the failure reasons in .workflow_state"
        echo "  2. Fix the identified issues"
        echo "  3. Run: $WORKFLOW_SCRIPTS/quality_gate_validator.sh"
    else
        echo "  Please run the quality gate validation:"
        echo "  $WORKFLOW_SCRIPTS/quality_gate_validator.sh"
    fi
    echo ""
    exit 1
fi

# Verify code hasn't changed since quality gate
if [ -f "$WORKFLOW_SCRIPTS/workflow_state_manager.sh" ]; then
    if ! "$WORKFLOW_SCRIPTS/workflow_state_manager.sh" verify 2>/dev/null; then
        error "❌ Code has changed since quality gate passed"
        echo ""
        echo "  The staged files have been modified after the quality gate validation."
        echo "  This could bypass quality checks. Please re-run:"
        echo ""
        echo "  $WORKFLOW_SCRIPTS/quality_gate_validator.sh"
        echo ""
        exit 1
    fi
fi

# Check for common issues that should block commits
check_common_issues() {
    local issues_found=false

    # Check for merge conflict markers
    if git diff --cached | grep -E "^(\+).*(<<<<<<<|=======|>>>>>>>)" > /dev/null; then
        error "❌ Merge conflict markers detected"
        issues_found=true
    fi

    # Check for large files (>10MB)
    for file in $(git diff --cached --name-only); do
        if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            if [ "$size" -gt 10485760 ]; then
                error "❌ Large file detected: $file ($(($size / 1048576))MB)"
                warning "Consider using Git LFS for large files"
                issues_found=true
            fi
        fi
    done

    # Check for sensitive files
    for pattern in ".env.local" ".env.production" "*.pem" "*.key" ".aws" ".ssh"; do
        if git diff --cached --name-only | grep -q "$pattern"; then
            error "❌ Potentially sensitive file detected: $pattern"
            warning "Review carefully before committing sensitive files"
            read -p "Are you sure you want to commit potentially sensitive files? (y/n) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                issues_found=true
            fi
        fi
    done

    if [ "$issues_found" = true ]; then
        return 1
    fi
    return 0
}

# Run common issue checks
if ! check_common_issues; then
    error "❌ Pre-commit checks failed"
    exit 1
fi

# Update workflow state to indicate git operations
if [ -f "$WORKFLOW_SCRIPTS/workflow_state_manager.sh" ]; then
    "$WORKFLOW_SCRIPTS/workflow_state_manager.sh" update -p GIT_OPERATIONS -s IN_PROGRESS 2>/dev/null || true
fi

# All checks passed
success "✅ Pre-commit validation passed"
echo ""
echo "  Quality gate:     PASSED"
echo "  Code integrity:   VERIFIED"
echo "  Common issues:    NONE"
echo ""
echo "  Proceeding with commit..."
echo ""

exit 0